generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String              @id @default(uuid())
  name             String
  email            String
  address          String?
  phone            String?
  password         String
  active           Boolean             @default(true)
  artist           Boolean             @default(false)
  admin            Boolean             @default(false)
  // imageId          String?             @unique @map("image_id")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @default(now()) @map("updated_at")
  deletedAt        DateTime?           @map("deleted_at")
  collections      ProductCollection[]
  products         Product[]
  publications     Publication[]
  // addresses        UserAddress[]
  // contacts         UserContact[]
  // image            UserImage?          @relation(fields: [imageId], references: [id])
  UserCollaborator UserCollaborator[]

  @@map("users")
}

model UserCollaborator {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  biography String
  active    Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_collaborators")
}

// model UserContact {
//   id          String    @id @default(uuid())
//   userId      String    @map("user_id")
//   contact     String
//   contactType String    @map("contact_type")
//   createdAt   DateTime  @default(now()) @map("created_at")
//   updatedAt   DateTime  @default(now()) @map("updated_at")
//   deletedAt   DateTime? @map("deleted_at")
//   user        User      @relation(fields: [userId], references: [id])

//   @@map("user_contacts")
// }

// model UserAddress {
//   id         String    @id @default(uuid())
//   userId     String    @map("user_id")
//   zipCode    String    @map("zip_code")
//   street     String
//   number     String
//   complement String
//   createdAt  DateTime  @default(now()) @map("created_at")
//   updatedAt  DateTime  @default(now()) @map("updated_at")
//   deletedAt  DateTime? @map("deleted_at")
//   user       User      @relation(fields: [userId], references: [id])

//   @@map("user_addresses")
// }

// model UserImage {
//   id        String    @id @default(uuid())
//   name      String
//   path      String
//   createdAt DateTime  @default(now()) @map("created_at")
//   updatedAt DateTime  @default(now()) @map("updated_at")
//   deletedAt DateTime? @map("deleted_at")
//   user      User?

//   @@map("user_images")
// }

model Category {
  id           String        @id @default(uuid())
  title        String        @default("category")
  description  String
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")
  produts      Product[]
  publications Publication[]

  @@map("categories")
}

model Product {
  id          String              @id @default(uuid())
  userId      String              @map("user_id")
  name        String
  urlName     String?             @map("url_name")
  description String
  instagram   String
  categoryId  String              @map("category_id")
  active      Boolean
  showcase    Boolean
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @map("updated_at")
  deletedAt   DateTime?           @map("deleted_at")
  collections ProductCollection[]
  images      ProductImage[]
  category    Category            @relation(fields: [categoryId], references: [id])
  user        User                @relation(fields: [userId], references: [id])

  @@map("products")
}

model ProductImage {
  id        String    @id @default(uuid())
  productId String    @map("product_id")
  name      String
  path      String
  extension String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  product   Product   @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model ProductCollection {
  id                 String           @id @default(uuid())
  userId             String           @map("user_id")
  productId          String           @map("product_id")
  collectionStatusId String           @map("collection_status_id")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @default(now()) @map("updated_at")
  deletedAt          DateTime?        @map("deleted_at")
  status             CollectionStatus @relation(fields: [collectionStatusId], references: [id])
  product            Product          @relation(fields: [productId], references: [id])
  user               User             @relation(fields: [userId], references: [id])

  @@map("product_collections")
}

model CollectionStatus {
  id          String              @id @default(uuid())
  description String              @map("description")
  active      Boolean             @default(true)
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @map("updated_at")
  deletedAt   DateTime?           @map("deleted_at")
  collection  ProductCollection[]

  @@map("collection_status")
}

model Publication {
  id          String             @id @default(uuid())
  userId      String             @map("user_id")
  title       String
  caption     String
  description String
  categoryId  String             @map("category_id")
  instagram   String?
  active      Boolean            @default(true)
  showcase    Boolean            @default(false)
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @default(now()) @map("updated_at")
  deletedAt   DateTime?          @map("deleted_at")
  images      PublicationImage[]
  category    Category           @relation(fields: [categoryId], references: [id])
  user        User               @relation(fields: [userId], references: [id])

  @@map("publications")
}

model PublicationImage {
  id            String      @id @default(uuid())
  publicationId String      @map("publication_id")
  name          String
  path          String
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")
  deletedAt     DateTime?   @map("deleted_at")
  publication   Publication @relation(fields: [publicationId], references: [id])

  @@map("publication_images")
}
